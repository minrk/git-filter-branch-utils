#!/usr/bin/env python3
"""
Clone a repo, keeping only the history of a whitelist of files.
Those files are followed as far as `git log --follow` can follow them.
The use of `--follow` also means a few extra files may be caught along the way,
though they are usually empty.

This is a one-off script for splitting the IPython repo,
not built for re-use. It could be updated to do so.
"""
import os, sys, time
import pipes
from subprocess import check_call as sh, check_output
import shutil
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('src', type=str, help="The source repo to clone")
parser.add_argument('dst', type=str, help="The destination of the new clone")
parser.add_argument('--file-list', '-f', type=str, nargs='+', help="Line-delimited file(s) containing paths to track.")
parser.add_argument('files', type=str, nargs='*',
    help="Files whose history should be preserved. Filenames can be specified in files with --file-list.")


opts = parser.parse_args()
paths = opts.files or []
for path in opts.file_list or []:
    with open(path) as f:
        for line in f:
            paths.append(line.strip())

assert paths, "need some paths to track"

src_repo = opts.src
repo_dir = opts.dst
if os.path.exists(repo_dir):
    print("destination already exists: %s" % repo_dir)
    sys.exit(1)

# some constants that should be arguments:
here = os.path.abspath(os.path.dirname(__file__))
get_history = os.path.join(here, 'get-filename-history')
index_filter = os.path.join(here, 'whitelist-index-filter')

sh(['git', 'clone', '-b', 'master', src_repo, repo_dir])
os.chdir(repo_dir)
check_output(['git', 'tag', '-d'] + check_output(['git', 'tag']).decode().split())
sh('git remote rm origin'.split())
print(repo_dir)

# count the number of files whose history we are tracking
count = 0
for path in paths:
    if not os.path.isdir(path):
        count += 1
    for _, __, files in os.walk(path):
        for f in files:
            count += 1

print("Computing filename history to preserve")
print(paths)
tic = time.time()
whitelist = check_output([
    get_history
    ] + paths).decode('utf8').splitlines()
toc = time.time()

assert whitelist
print('\n'.join(whitelist))
print("Spent %.1fs computing filename history of %i files (%i found)" % (
    toc-tic, count, len(whitelist),
))

print("Filtering git history")
tic = time.time()
index_filter_cmd = ' '.join(map(pipes.quote,
    [index_filter] + whitelist
))
sh([
    'git', 'filter-branch', '--prune-empty', '--index-filter',
    index_filter_cmd, '--', '--all',
], stdout=sys.stderr)
toc = time.time()

dt = toc-tic
hrs = dt // 60
mins = dt % 60
print("Spent %02i:%02i running filter-branch" % (hrs, mins))

# cleanup refs
sh('git update-ref -d refs/original/refs/heads/master'.split())
sh('git reflog expire --expire=now --all'.split())
shutil.rmtree(".git/logs")

sh('git gc --aggressive --prune=now'.split())

print(repo_dir)
